name: Build and Push Docker Image and Release Binary

on:
  push:
    branches:
      - master

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up QEMU for multi-platform builds
      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v2

      # Step 3: Log in to Docker Hub
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # # Step 4: Set up Docker Buildx
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # # Step 5: Build and Push Docker Image
      # - name: Build and Push Docker Image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     platforms: linux/amd64,linux/arm64
      #     push: true
      #     tags: jbronson29/recipe:latest

      # Step 6: Build the Binary
      - name: Build Binary
        run: |
          mkdir -p output
          go build -o output/myapp .

      # Step 7: Create a GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: "Release v${{ github.run_number }}"
          body: "Automated release of the latest version."
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Upload the Binary to the Release
      - name: Upload Binary to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/myapp
          asset_name: myapp
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}